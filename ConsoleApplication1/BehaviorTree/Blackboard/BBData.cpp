/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 10 */
/* metalib md5sum: 6f5632e4a08068fb87f5e36963885eb8 */

/* creation time: Tue Jun  4 14:17:59 2019 */
/* tdr version: 2.7.26, build at 20171102 */

#if defined(_WIN32) || defined(_WIN64)
#pragma warning(disable:4996 4244)
#endif

#include "BBData.h"
#include "TdrTypeUtil.h"

namespace BlackBoard
{

using tsf4g_tdr::TdrBufUtil;
using tsf4g_tdr::TdrTypeUtil;



TdrError::ErrorType
BBDataBodyUnion::construct(int64_t selector)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (0 == selector)
    {
        ret = this->stServerTest.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (1 == selector)
    {
        ret = this->stMonsterNormal.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
BBDataBodyUnion::construct()
{
    memset(this, 0, sizeof(*this));

    return TdrError::TDR_NO_ERROR;
}

TdrError::ErrorType
BBDataBodyUnion::pack(int64_t selector, char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(selector, destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
BBDataBodyUnion::pack(int64_t selector, TdrWriteBuf& destBuf, unsigned cutVer) const
{
    /* adjust cutversion */
    if (0 == cutVer || BBDataBodyUnion::CURRVERSION < cutVer)
    {
        cutVer = BBDataBodyUnion::CURRVERSION;
    }

    /* check cutversion */
    if (BBDataBodyUnion::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (0 == selector)
    {
        ret = this->stServerTest.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (1 == selector)
    {
        ret = this->stMonsterNormal.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
BBDataBodyUnion::unpack(int64_t selector, const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(selector, srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
BBDataBodyUnion::unpack(int64_t selector, TdrReadBuf& srcBuf, unsigned cutVer)
{
    /* adjust cutversion */
    if (0 == cutVer || BBDataBodyUnion::CURRVERSION < cutVer)
    {
        cutVer = BBDataBodyUnion::CURRVERSION;
    }

    /* check cutversion */
    if (BBDataBodyUnion::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (0 == selector)
    {
        ret = this->stServerTest.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (1 == selector)
    {
        ret = this->stMonsterNormal.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
BBDataBodyUnion::visualize(int64_t selector, char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(selector, destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
BBDataBodyUnion::visualize(int64_t selector, TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (0 == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stServerTest]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stServerTest */
        if (0 > indent)
        {
            ret = this->stServerTest.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stServerTest.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (1 == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stMonsterNormal]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->stMonsterNormal */
        if (0 > indent)
        {
            ret = this->stMonsterNormal.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->stMonsterNormal.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}




TdrError::ErrorType
BBData::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    this->iType = 1;

    const int64_t selector4stDataBody = this->iType;
    ret = this->stDataBody.construct(selector4stDataBody);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

TdrError::ErrorType
BBData::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
BBData::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || BBData::CURRVERSION < cutVer)
    {
        cutVer = BBData::CURRVERSION;
    }

    /* check cutversion */
    if (BBData::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iType */
    {
        ret = destBuf.writeInt32(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->stDataBody */
    {
        const int64_t selector4stDataBody = this->iType;
        ret = this->stDataBody.pack(selector4stDataBody, destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
BBData::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
BBData::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || BBData::CURRVERSION < cutVer)
    {
        cutVer = BBData::CURRVERSION;
    }

    /* check cutversion */
    if (BBData::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iType */
    {
        ret = srcBuf.readInt32(this->iType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->stDataBody */
    {
        const int64_t selector4stDataBody = this->iType;
        ret = this->stDataBody.unpack(selector4stDataBody, srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
BBData::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
BBData::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iType]", "%d", this->iType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->stDataBody */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[stDataBody]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->stDataBody */
    const int64_t selector4stDataBody = this->iType;
    if (0 > indent)
    {
        ret = this->stDataBody.visualize(selector4stDataBody, destBuf, indent, separator);
    } else
    {
        ret = this->stDataBody.visualize(selector4stDataBody, destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
BBData::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
BBData::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


}
