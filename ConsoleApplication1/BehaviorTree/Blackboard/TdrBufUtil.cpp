/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* creation time: Tue Jun  4 14:17:59 2019 */
/* tdr version: 2.7.26, build at 20171102 */

#if defined(_WIN32) || defined(_WIN64)
#pragma warning(disable:4996 4100)
#endif

#include <cstdarg>

#include "TdrPal.h"
#include "TdrBufUtil.h"
#include "TdrTypeUtil.h"

namespace tsf4g_tdr
{


TdrError::ErrorType
TdrBufUtil::printMultiStr(TdrWriteBuf& buf, const char* str, int times)
{
    assert(NULL != str);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    for (int i = 0; i < times; i++)
    {
        ret = buf.writeBytes(str, strlen(str));
        if (TdrError::TDR_NO_ERROR != ret)
        {
            break;
        }
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printVariable(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, bool withSep)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        if (withSep)
        {
            ret = buf.textize("%s%c", variable, sep);
        } else
        {
            ret = buf.textize("%s: ", variable);
        }
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printVariable(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, unsigned int arrIdx, bool withSep)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        if (withSep)
        {
            ret = buf.textize("%s[%u]%c", variable, arrIdx, sep);
        } else
        {
            ret = buf.textize("%s[%u]: ", variable, arrIdx);
        }
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printVariable(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, const char* format, ...)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    va_list va;
    va_start(va, format);

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s: ", variable);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.vtextize(format, va);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    va_end(va);

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printVariable(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, unsigned int arrIdx, const char* format, ...)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    va_list va;
    va_start(va, format);

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s[%u]: ", variable, arrIdx);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.vtextize(format, va);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    va_end(va);

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printArray(TdrWriteBuf& buf, int indent, char,
                    const char* variable, int64_t count)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s[0 : " TDR_CPP_INT64_FORMAT"]:", variable, count - 1);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printString(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, const char* str)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s: ", variable);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s", str);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printString(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, unsigned int arrIdx, const char* str)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s[%u]: ", variable, arrIdx);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s", str);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printWString(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, const tdr_wchar_t* str)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s: ", variable);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        size_t strLen = 1 + TdrTypeUtil::wstrlen(str);
        for (size_t i = 0; i < strLen; i++)
        {
            ret = buf.textize(" 0x%04x", str[i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                break;
            }
        }
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printWString(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, unsigned int arrIdx, const tdr_wchar_t* str)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s[%u]: ", variable, arrIdx);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        size_t strLen = 1 + TdrTypeUtil::wstrlen(str);
        for (size_t i = 0; i < strLen; i++)
        {
            ret = buf.textize(" 0x%04x", str[i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                break;
            }
        }
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printTdrIP(TdrWriteBuf& buf, int indent, char sep,
                    const char* variable, tdr_ip_t tdrIp)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s: ", variable);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = TdrTypeUtil::tdrIp2Str(buf, tdrIp);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printTdrIP(TdrWriteBuf& buf, int indent, char sep,
                    const char* variable, unsigned int arrIdx, tdr_ip_t tdrIp)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s[%u]: ", variable, arrIdx);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = TdrTypeUtil::tdrIp2Str(buf, tdrIp);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printTdrTime(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, tdr_time_t tdrTime)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s: ", variable);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = TdrTypeUtil::tdrTime2Str(buf, tdrTime);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printTdrTime(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, unsigned int arrIdx, tdr_time_t tdrTime)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s[%u]: ", variable, arrIdx);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = TdrTypeUtil::tdrTime2Str(buf, tdrTime);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printTdrDate(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, tdr_date_t tdrDate)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s: ", variable);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = TdrTypeUtil::tdrDate2Str(buf, tdrDate);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printTdrDate(TdrWriteBuf& buf, int indent, char sep,
                        const char* variable, unsigned int arrIdx, tdr_date_t tdrDate)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s[%u]: ", variable, arrIdx);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = TdrTypeUtil::tdrDate2Str(buf, tdrDate);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printTdrDateTime(TdrWriteBuf& buf, int indent, char sep,
                            const char* variable, tdr_datetime_t tdrDateTime)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s: ", variable);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = TdrTypeUtil::tdrDateTime2Str(buf, tdrDateTime);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

TdrError::ErrorType
TdrBufUtil::printTdrDateTime(TdrWriteBuf& buf, int indent, char sep,
                            const char* variable, unsigned int arrIdx, tdr_datetime_t tdrDateTime)
{
    assert(NULL != variable);

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    ret = printMultiStr(buf, "    ", indent);

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.textize("%s[%u]: ", variable, arrIdx);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = TdrTypeUtil::tdrDateTime2Str(buf, tdrDateTime);
    }

    if (TdrError::TDR_NO_ERROR == ret)
    {
        ret = buf.writeCharWithNull(sep);
    }

    return ret;
}

}
