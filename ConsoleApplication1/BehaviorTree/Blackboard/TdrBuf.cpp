/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* creation time: Tue Jun  4 14:17:59 2019 */
/* tdr version: 2.7.26, build at 20171102 */

#if defined(_WIN32) || defined(_WIN64)
#pragma warning(disable:4996)
#endif

#include "TdrBuf.h"

namespace tsf4g_tdr
{


TdrError::ErrorType
TdrReadBuf::toHexStr(char* destBuf, size_t len, size_t* usedLen) const
{
    assert (NULL != destBuf);

    static char hexTab[16] =
    {
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
    };

    assert(position <= length);

    const size_t dataLen = length - position;
    const size_t hexDatLen = dataLen * 2 + 1;
    if (len < hexDatLen)
    {
        return TdrError::TDR_ERR_SHORT_BUF_FOR_WRITE;
    }

    size_t hexBufPos = 0;
    for (size_t i = 0; i < dataLen; i++)
    {
        unsigned char low  = *(beginPtr + position + i) & 0X0F;
        unsigned char high = *(unsigned char*)(beginPtr + position + i) >> 4;
        destBuf[hexBufPos++] = hexTab[high];
        destBuf[hexBufPos++] = hexTab[low];
    }
    destBuf[hexBufPos] = '\0';
    if (NULL != usedLen)
    {
        *usedLen = hexDatLen;
    }

    return TdrError::TDR_NO_ERROR;
}

TdrError::ErrorType
TdrReadBuf::fromHexStr(const char* srcHexStr, size_t len, size_t* usedLen)
{
    assert(NULL != srcHexStr);

    if (0 != len % 2)
    {
        return TdrError::TDR_ERR_INVALID_HEX_STR_LEN;
    }

    assert(position <= length);

    const size_t available = length - position;
    const size_t capacity = 2 * available;

    const size_t _usedLen = (capacity <= len)? capacity : len;

    size_t pos = position;
    for (size_t i = 0; i < _usedLen; i += 2)
    {
        int highChar = srcHexStr[i];
        int lowChar  = srcHexStr[i + 1];

        if (!isxdigit(highChar) || !isxdigit(lowChar))
        {
            if (NULL != usedLen)
            {
                *usedLen = 2 * i;
            }
            return TdrError::TDR_ERR_INVALID_HEX_STR_FORMAT;
        }

        unsigned char value = 0;

        if (isdigit(highChar))
        {
            value |= ((highChar - '0') << 4);
        } else if (islower(highChar))
        {
            value |= ((highChar - 'a' + 10) << 4);
        } else
        {
            value |= ((highChar - 'A' + 10) << 4);
        }

        if (isdigit(lowChar))
        {
            value |= (lowChar - '0');
        } else if (islower(lowChar))
        {
            value |= (lowChar - 'a' + 10);
        } else
        {
            value |= (lowChar - 'A' + 10);
        }

        *(unsigned char*)(beginPtr + pos++) = value;
    }

    length = position + _usedLen / 2;
    if (NULL != usedLen)
    {
        *usedLen = _usedLen;
    }

    return TdrError::TDR_NO_ERROR;
}

}
